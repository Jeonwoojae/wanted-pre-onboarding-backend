# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Deploy EC2

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RESOURCE_PATH: ./src/main/resources/application-prod.yml
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Set Yml
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.RESOURCE_PATH }} 
      env:
        spring.datasource.url: ${{ secrets.MYSQLDB_URL }} 
        spring.datasource.username: ${{ secrets.MYSQLDB_USERNAME }} 
        spring.datasource.password: ${{ secrets.MYSQLDB_PASSWORD }}
      
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: init Gradle
      run: ./gradlew init
    - name: Build with Gradle
      run: ./gradlew clean bootJar -x test
    - name : Build Docker Image
      run: docker build -t dnwo0719/wanted .
    - name: DockerHub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: DockerHub Push
      run: docker push dnwo0719/wanted

# 배포 시작
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v0.1.6 
      with:
        host: ${{ secrets.REMOTE_IP }} # 인스턴스 IP
        username: ubuntu
        key: ${{ secrets.REMOTE_PRIVATE_KEY }} # ec2 instance pem key
        port: ${{ secrets.REMOTE_SSH_PORT }} # 접속포트
        script: | # 실행할 스크립트
          sudo docker stop wanted
          sudo docker rm wanted
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/wanted
          docker run -d --name wanted --network ${{ secrets.NETWORK }} -p ${{ secrets.USER_PORT }}:${{ secrets.USER_PORT }} ${{ secrets.DOCKERHUB_USERNAME }}/wanted
          docker image prune -f
